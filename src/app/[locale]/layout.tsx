import { BaiDuAnalytics, Footer, GoogleAnalytics, Header } from '@/components'
import { siteConfig } from '@/constants'
import { routing } from '@/i18n/routing'
import { cn } from '@/lib/utils'
import { ThemeProvider } from '@/providers/ThemeProvider'
import { Analytics } from '@vercel/analytics/react'
import type { Metadata } from 'next'
import { Viewport } from 'next'
import { NextIntlClientProvider } from 'next-intl'
import { getMessages, getTranslations } from 'next-intl/server'
import { Geist, Geist_Mono } from 'next/font/google'
import { notFound } from 'next/navigation'
import './globals.css'

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin']
})

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin']
})

export async function generateMetadata({ params }: any) {
  const { locale } = await params
  const t = await getTranslations({ locale, namespace: 'SiteConfig' })

  return {
    title: t(siteConfig.name as any),
    description: t(siteConfig.description as any),
    keywords: siteConfig.keywords,
    authors: siteConfig.authors,
    creator: siteConfig.creator,
    icons: siteConfig.icons,
    metadataBase: siteConfig.metadataBase,
    openGraph: siteConfig.openGraph,
    twitter: siteConfig.twitter
  } as Metadata
}

export const viewport: Viewport = {
  themeColor: siteConfig.themeColors
}

// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app'
// }

export default async function RootLayout({
  children,
  params
}: Readonly<{
  children: React.ReactNode
  params: { locale: string }
}>) {
  const { locale } = await params
  // Ensure that the incoming `locale` is valid
  if (!routing.locales.includes(locale as any)) {
    notFound()
  }

  // Providing all messages to the client
  // side is the easiest way to get started
  const messages = await getMessages()

  return (
    <html lang={locale} suppressHydrationWarning>
      <body className={cn('min-h-screen bg-background font-sans antialiased', geistSans.variable, geistMono.variable, 'antialiased')}>
        <ThemeProvider attribute="class" defaultTheme={siteConfig.nextThemeColor} enableSystem>
          <NextIntlClientProvider messages={messages}>
            <Header />
            <main className="flex flex-col items-center py-6">{children}</main>
            <Footer />
            <Analytics />
          </NextIntlClientProvider>
        </ThemeProvider>
        {process.env.NODE_ENV === 'production' && (
          <>
            <GoogleAnalytics />
            <BaiDuAnalytics />
          </>
        )}
      </body>
    </html>
  )
}
